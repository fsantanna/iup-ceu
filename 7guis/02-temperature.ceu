^["@/iup/iup.ceu"]

spawn {
    val labelC = iup.label("Celsius =")
    val labelF = iup.label("Fahrenheit")

    val tempC = iup.text()
        iup.set(tempC, :SIZE, "50")
        iup.set(tempC, :MASK, `:pointer IUP_MASK_FLOAT`)
        iup.set(tempC, :VALUE, "")

    val tempF = iup.text()
        iup.set(tempF, :SIZE, "50")
        iup.set(tempF, :MASK, `:pointer IUP_MASK_FLOAT`)
        iup.set(tempF, :VALUE, "")

    val hbox = iup.hbox()
        iup.append(hbox, tempC)
        iup.append(hbox, labelC)
        iup.append(hbox, tempF)
        iup.append(hbox, labelF)
        iup.set(hbox, :MARGIN, "10x10")
        iup.set(hbox, :GAP, "10")
        iup.set(hbox, :ALIGNMENT, "ACENTER")

    val dlg = iup.dialog(hbox)
        iup.set(dlg, :TITLE, "Temperature")

    iup.show-xy(dlg, `:number IUP_CENTER`, `:number IUP_CENTER`)

    par {
        every :Iup.Value | it.h==tempC {
            val c = iup.get.number(tempC, :VALUE)
            val f = (c*(9.0/5.0)) + 32
            `static char str[16]; sprintf(str, "%.2lf", $f.Number);`
            iup.set(tempF, :VALUE, `:pointer str`)
        }
    } with {
        every :Iup.Value | it.h==tempF {
            val f = iup.get.number(tempF, :VALUE)
            val c = ((f-32) * 5.0) / 9.0
            `static char str[16]; sprintf(str, "%.2lf", $c.Number);`
            iup.set(tempC, :VALUE, `:pointer str`)
        }
    }
}

iup.loop()
