data :Iup = [h] {
    :Action = []
    :Value = []
    :List = [item,state] {
        :Action = []
    }
}

data :IUP = [
    loop,
    get :PICO-Get = [pointer,bool,number],
    set,
    button, label, gauge, val, list, text,
    hbox, vbox, append,
    dialog, show-xy
]

```:pre
#include <iup.h>
int iup_action_cb (Ihandle* h) {
    CEU_Value args[] = {
        { CEU_VALUE_POINTER, {.Pointer=h} }
    };
    CEU_Value evt = ceu_create_tuple(1, 1, args CEU_LEX_X(COMMA 1));
    ceu_gc_inc_val(evt);

    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Iup_Action} };
    ceu_tag_set(tag, evt);

    ceu_broadcast_global(evt);
    ceu_gc_dec_val(evt);

    if (CEU_ERROR != CEU_ERROR_NONE) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }

    return IUP_DEFAULT;
}

int iup_value_cb (Ihandle* h) {
    CEU_Value args[] = {
        { CEU_VALUE_POINTER, {.Pointer=h} }
    };
    CEU_Value evt = ceu_create_tuple(1, 1, args CEU_LEX_X(COMMA 1));
    ceu_gc_inc_val(evt);

    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Iup_Value} };
    ceu_tag_set(tag, evt);

    ceu_broadcast_global(evt);
    ceu_gc_dec_val(evt);

    if (CEU_ERROR != CEU_ERROR_NONE) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }
    return IUP_DEFAULT;
}

int iup_list_action_cb (Ihandle* h, char *text, int item, int state) {
    CEU_Value args[] = {
        { CEU_VALUE_POINTER, {.Pointer=h}   },
        { CEU_VALUE_NUMBER,  {.Number=item} },
        { CEU_VALUE_BOOL,    {.Bool=state}  }
    };
    CEU_Value evt = ceu_create_tuple(1, 3, args CEU_LEX_X(COMMA 1));
    ceu_gc_inc_val(evt);

    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Iup_List_Action} };
    ceu_tag_set(tag, evt);

    ceu_broadcast_global(evt);
    ceu_gc_dec_val(evt);

    if (CEU_ERROR != CEU_ERROR_NONE) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }
    return IUP_DEFAULT;
}

int iup_timer_cb (Ihandle* h) {
    CEU_Value args[] = {
        { CEU_VALUE_NUMBER, {.Number=50} }
    };
    CEU_Value evt = ceu_create_tuple(1, 1, args CEU_LEX_X(COMMA 1));
    ceu_gc_inc_val(evt);

    CEU_Value tag = { CEU_VALUE_TAG, {.Tag=CEU_TAG_Clock} };
    ceu_tag_set(tag, evt);

    ceu_broadcast_global(evt);
    ceu_gc_dec_val(evt);

    if (CEU_ERROR != CEU_ERROR_NONE) {
        IupExitLoop();
        return IUP_CLOSE;   // TODO
    }
    return IUP_DEFAULT;
}
```

;; MAIN

`IupOpen(NULL,NULL);`
defer {
    `IupClose();`
}

;; IUP

val iup :IUP = group {

    ;; INIT

    func x-iup-loop () {
        ```
        Ihandle* iup_timer = IupTimer();
        IupSetAttribute(iup_timer, "TIME", "50");
        IupSetAttribute(iup_timer, "RUN", "YES");
        IupSetCallback(iup_timer, "ACTION_CB", (Icallback)iup_timer_cb);
        IupMainLoop();
        ```
    }

    ;; GET / SET

    val x-iup-get :IUP.Get = group {
        func x-iup-get-pointer (h, name) {
            val s = to.pointer(name)
            `:pointer IupGetAttribute($h.Pointer, $s.Pointer+1)`
        }
        func x-iup-get-bool (h, name) {
            val s = to.pointer(name)
            `:bool IupGetInt($h.Pointer, $s.Pointer+1)`
        }
        func x-iup-get-number (h, name) {
            val s = to.pointer(name)
            `:number IupGetFloat($h.Pointer, $s.Pointer+1)`
        }
        [x-iup-get-pointer, x-iup-get-bool, x-iup-get-number]
    }

    func x-iup-set (h, name, value) {
        val s = to-pointer(name)
        match value {
            :bool   => `IupSetInt($h.Pointer, $s.Pointer+1, $value.Bool);`
            :number => if math.floor(value) == value
                        => `IupSetInt($h.Pointer, $s.Pointer+1, $value.Number);`
                        => `IupSetFloat($h.Pointer, $s.Pointer+1, $value.Number);`
            :tag    => `IupSetAttribute($h.Pointer, $s.Pointer+1, $t.Pointer+1);`
                where {
                    val t = to.pointer(value)
                }
            else    => `IupSetStrAttribute($h.Pointer, $s.Pointer+1, $v.Pointer);`
                where {
                    val v = to.pointer(value)
                }
        }
    }

    ;; CONTROLS

    func x-iup-button (label) {
        val s = to.pointer(label)
        val h = `:pointer IupButton($s.Pointer, NULL)`
        `IupSetCallback($h.Pointer, "ACTION", iup_action_cb);`
        h
    }

    func x-iup-label (label) {
        val s = to.pointer(label)
        `:pointer IupLabel($s.Pointer)`
    }

    func x-iup-gauge () {
        val h = `:pointer IupGauge()`
        h
    }

    func x-iup-val (label) {
        val s = to.pointer(label)
        val h = `:pointer IupVal($s.Pointer)`
        `IupSetCallback($h.Pointer, "VALUECHANGED_CB", iup_value_cb);`
        h
    }

    func x-iup-list () {
        val h = `:pointer IupList(NULL)`
        `IupSetCallback($h.Pointer, "ACTION", (Icallback) iup_list_action_cb);`
        h
    }

    func x-iup-text () {
        val h = `:pointer IupText(NULL)`
        `IupSetCallback($h.Pointer, "VALUECHANGED_CB", iup_value_cb);`
        h
    }

    ;; CONTAINERS

    func x-iup-hbox () {
        `:pointer IupHbox(NULL)`
    }

    func x-iup-vbox () {
        `:pointer IupVbox(NULL)`
    }

    func x-iup-append (h, child) {
        `:pointer IupAppend($h.Pointer, $child.Pointer)`
    }

    ;; DIALOGS

    func x-iup-dialog (h) {
        `:pointer IupDialog($h.Pointer)`
    }

    func x-iup-show-xy (h, x, y) {
        `:number IupShowXY($h.Pointer, $x.Number, $y.Number)`
    }

    ;; RETURN

    [
        x-iup-loop, x-iup-get, x-iup-set,
        x-iup-button, x-iup-label, x-iup-gauge, x-iup-val, x-iup-list, x-iup-text,
        x-iup-hbox, x-iup-vbox, x-iup-append,
        x-iup-dialog, x-iup-show-xy,
    ]
}
